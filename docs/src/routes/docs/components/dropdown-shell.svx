---
name: DropdownShell
relatedComponents:
  - name: Dropdown
    link: ./docs/components/dropdown
---

<script>
  import { DropdownShell, Dropdown, Button } from 'attractions';
  import { ChevronDownIcon } from 'svelte-feather-icons';
  import Showcase from 'src/containers/docs/showcase.svelte';
  import ColorPreview from 'src/components/docs/color-preview.svelte';
  import ShadowPreview from 'src/components/docs/shadow-preview.svelte';
  import RelatedComponents from 'src/components/docs/related-components.svelte';

</script>

# DropdownShell

The container for the [`Dropdown`](./docs/components/dropdown) activator and content.

<RelatedComponents components={relatedComponents} />

<Showcase>
  <div slot="showcase" class="padded">
    <DropdownShell let:toggle>
      <Button on:click={toggle}>
        this is the dropdown shell
        <ChevronDownIcon size="24" class="ml dropdown-chevron" />
      </Button>
      <Dropdown right>
        <div class="padded">
          and this is the dropdown
        </div>
      </Dropdown>
    </DropdownShell>
    <DropdownShell>
      Useless without a <code>&lt;Dropdown /&gt;</code>
    </DropdownShell>
  </div>
  <div slot="source">

```svelte
<DropdownShell let:toggle>
  <Button on:click={toggle}>
    this is the dropdown shell
    <ChevronDownIcon size="24" class="ml dropdown-chevron" />
  </Button>
  <Dropdown right>
    <div class="padded">
      and this is the dropdown
    </div>
  </Dropdown>
</DropdownShell>
<DropdownShell>
  Useless without a <code>&lt;Dropdown /&gt;</code>
</DropdownShell>
```

  </div>
</Showcase>


## Properties {#properties}

### Functional Properties

| Name | Default | Type | Description |
| ---- | ------- | ---- | ----------- |
| **`open`** | `false` | `boolean` | Controls whether the dropdown content is shown or hidden. |

### Class Properties

All `<DropdownShell>` components use the `.dropdown-shell` class

| Name | Default | Type | Description |
| ---- | ------- | ---- | ----------- |
| **`class`** | `null` | `string` | A class string to add to the underlying `<div>` element. |

==Bonus==: use the `.dropdown-chevron` class for the chevrons on the dropdown shell to get a nice rotation animation (see showcase).

## Events {#events}

| Name | Event Detail | Description |
| ---- | ------------ | ----------- |
| **`change`** | `value: boolean` | Fired when toggling the dropdown (with `value` being `true` for "open" and `false` for "closed"). |


## Slots {#slots}

### Default slot

The shell of the dropdown. The dropdown itself must also be inside it since it exposes the `toggle` function as a slot prop.


## Functions {#functions}

| Name | Arguments | Description |
| ---- | ------------ | ----------- |
| **`toggle`** | | Toggles the dropdown's "open" state. |

<style src="../../../../static/css/routes/docs/components/dropdown.scss"></style>
