---
name: Installation
---

<script lang="ts">
  import { base } from '$app/paths';
  import { Tabs, Label } from '$lib';
  import CopyableCode from '$components/docs/copyable-code.svelte';

  const PackageManager = {
    npm: 'npm',
    yarn: 'Yarn',
    pnpm: 'pnpm',
  };

  const Bundler = {
    rollup: 'Rollup',
    webpack: 'Webpack',
  };

  const Framework = {
    svelte: 'Svelte',
    other: 'Other'
  };

  let yourPackageManager = PackageManager.npm;
  let yourBundler = Bundler.rollup;
  let yourFramework = Framework.svelte;
</script>

# Installation

<div class="toolchain">
  <Label>Package manager</Label>
  <Tabs
    items={Object.values(PackageManager)}
    bind:value={yourPackageManager}
    name="package-managers"
  />

  <Label>Bundler</Label>
  <Tabs
    items={Object.values(Bundler)}
    bind:value={yourBundler}
    name="bundlers"
  />

  <Label>Framework</Label>
  <Tabs
    items={Object.values(Framework)}
    bind:value={yourFramework}
    name="frameworks"
  />
</div>

{#if yourFramework === Framework.other}
  <div class="prelude">

    You can use Attractions with other JS frameworks such as React and Vue, however, this usage is rather restricted in capabilities.

    If you're experiencing trouble, see if you can wrap the entire usage of this library
    in its own Svelte component that does minimal interactions with the world (as few props/events as possible)
    and integrate that component into your page rendered with another framework.

  </div>
{/if}

{#if yourFramework !== Framework.other && yourBundler === Bundler.webpack}
  <div class="caution">
    <Label>Caution</Label>

    Webpack 4.x.x doesn't support the following ES Modules syntax: `export * as X from 'Y'`.
    Thus, in order to use Attractions with Webpack 4, you need to transpile its index file with Babel.

    Install Babel (if you don't have it already):

    <CopyableCode terminal>
      {#if yourPackageManager === PackageManager.npm}

```shell
npm install --save-dev babel-loader @babel/core @babel/preset-env
```

      {:else if yourPackageManager === PackageManager.yarn}

```shell
yarn add --dev babel-loader @babel/core @babel/preset-env
```

      {:else}

```shell
pnpm add --save-dev babel-loader @babel/core @babel/preset-env
```

      {/if}
    </CopyableCode>

    And add the following rule:

    <CopyableCode filename="webpack.config.js">

```js
module.exports = {
  module: {
    rules: [
      // ...,
      {
        test: /attractions\\/index\.js$/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env']
          },
        },
      },
    ],
  },
};
```

    </CopyableCode>
  </div>
{/if}

**Step 1.** Add Attractions {#if yourFramework !== Framework.other} and its peer dependencies {/if}
to your {@html yourFramework === Framework.other ? '`dependencies`' : '`devDependencies`'}:

{#if yourPackageManager === PackageManager.npm}
  <CopyableCode terminal>
    {#if yourFramework === Framework.other}

```shell
npm install --save attractions
```

    {:else}

```shell
npm install --save-dev attractions svelte-preprocess sass postcss
```

    {/if}
  </CopyableCode>
{:else if yourPackageManager === PackageManager.yarn}
  <CopyableCode terminal>
    {#if yourFramework === Framework.other}

```shell
yarn add attractions
```

    {:else}

```shell
yarn add --dev attractions svelte-preprocess sass postcss
```

    {/if}
  </CopyableCode>
{:else}
  <CopyableCode terminal>
    {#if yourFramework === Framework.other}

```shell
pnpm add attractions
```

    {:else}

```shell
pnpm add --save-dev attractions svelte-preprocess sass postcss
```

    {/if}
  </CopyableCode>
{/if}

{#if yourFramework !== Framework.other}

  **Step 2.** Add `svelte-preprocess` to your preprocessor chain
  {#if yourBundler === Bundler.rollup}
    {#if yourFramework === Framework.svelte}
      ([as shown here](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/usage.md#with-rollup-plugin-svelte)):
    {:else}
      ([as shown here](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/usage.md#with-svelte-config)):
    {/if}
  {:else}
    ([as shown here](https://github.com/sveltejs/svelte-preprocess/blob/main/docs/usage.md#with-svelte-loader)):
  {/if}

  <CopyableCode filename="svelte.config.js">

```js
const sveltePreprocess = require('svelte-preprocess');

module.exports = {
  preprocess: [sveltePreprocess()],
};
```

  </CopyableCode>

  {#if yourBundler === Bundler.rollup}
    {#if yourFramework === Framework.svelte}
      <CopyableCode filename="rollup.config.js">

```js
import svelte from 'rollup-plugin-svelte';
const svelteConfig = require('./svelte.config.js');  // it has to be a CommonJS import

export default {
  // ...,
  plugins: [
    svelte({
      ...svelteConfig,
      // ...,
    }),
  ],
};
```

      </CopyableCode>
    {:else}
      <CopyableCode filename="rollup.config.js">

```js
import svelte from 'rollup-plugin-svelte';
const svelteConfig = require('./svelte.config.js');  // it has to be a CommonJS import

export default {
  client: {
    // ...,
    plugins: [
      svelte({
        ...svelteConfig,
        // ...,
      }),
    ],
  },
  server: {
    // ...,
    plugins: [
      svelte({
        ...svelteConfig,
        // ...,
      }),
    ],
  },
  serviceworker: {
    // ...
  },
};
```

      </CopyableCode>
    {/if}
  {:else if yourBundler === Bundler.webpack}
    {#if yourFramework === Framework.svelte}
      <CopyableCode filename="webpack.config.js">

```js
const svelteConfig = require('./svelte.config.js');

module.exports = {
  // ...,
  module: {
    rules: [
      // ...,
      {
        test: /\\.(svelte|html)$/,
        exclude: [],
        use: {
          loader: 'svelte-loader',
          options: {
            ...svelteConfig,
            // ...,
          },
        },
      },
    ],
  },
};
```

      </CopyableCode>
    {:else}
      <CopyableCode filename="webpack.config.js">

```js
const svelteConfig = require('./svelte.config.js');

module.exports = {
  client: {
    // ...,
    module: {
      rules: [
        // ...,
        {
          test: /\\.(svelte|html)$/,
          exclude: [],
          use: {
            loader: 'svelte-loader',
            options: {
              ...svelteConfig,
              // ...,
            },
          },
        },
      ],
    },
  },
  server: {
    // ...,
    module: {
      rules: [
        // ...,
        {
          test: /\\.(svelte|html)$/,
          exclude: [],
          use: {
            loader: 'svelte-loader',
            options: {
              ...svelteConfig,
              // ...,
            },
          },
        },
      ],
    },
  },
  serviceworker: {
    // ...
  },
}
```
      </CopyableCode>
    {/if}
  {/if}

  **Step 3.** Import the desired components as named imports and use wherever you like!

  <CopyableCode>

```svelte
<script>
  import { Button } from 'attractions';
</script>

<Button>click me</Button>
```

  </CopyableCode>

  If you'd like to use/edit the Sass variables that Attractions uses for theming or if your `node_modules` folder is not in the root of your project, take a look at the [**Theming with Sass**]({base}/docs/theming) section.

{:else}

  **Step 2.** Import the desired components as named imports and use with the [Component API](https://svelte.dev/docs#Client-side_component_API):

  <CopyableCode>

```js
import { DatePicker } from 'attractions';

const picker = new DatePicker({
  target: document.getElementById('container'),
  props: {
    firstWeekday: 0,
  },
});

// Listening to events
picker.$on('change', (e) => {
  console.log(e.detail);
});
```

  </CopyableCode>
{/if}

<style lang="scss">
@use 'sass:color';
@use '$css/attractions-theme' as vars;

.toolchain {
  background: rgba(var(--a-main), 0.03);
  border-radius: 1em;
  display: grid;
  gap: 0.35em;
  grid-auto-flow: column;
  grid-template: auto auto / 1fr 1fr 1fr;
  justify-items: center;
  margin: 2em 0;
  padding: 1.5em 1em;
}

.prelude {
  margin-bottom: 1.5em;
}

.caution {
  background: color.adjust(vars.$attention, $alpha: -0.93);
  border-radius: 1em;
  font-size: 0.9em;
  font-weight: 300;
  margin: 2em 0;
  padding: 1.5em;

  :global .label {
    color: color.scale(vars.$attention, $lightness: -30%);
    margin-bottom: 0.5em;
  }
}

strong {
  color: rgb(var(--a-main));
}
</style>
